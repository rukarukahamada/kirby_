using UnityEngine;

public class KirbySuction : MonoBehaviour
{
    public float suctionForce = 2f; // 吸い込む力の強さ
    public float maxDistance = 5f; // 吸い込む最大距離
    public float destroyDistance = 1f; // 吸い込むオブジェクトが消える距離
    public Transform playerTransform; // プレイヤーのTransform
    public GameObject suctionRangeColliderPrefab; // 吸い込む範囲のCollider（Prefab）
    public Color suctionColor = Color.green; // 吸い込み時のキャラクターの色
    private Color originalColor; // 元のキャラクターの色

    private GameObject suctionRangeColliderInstance; // 実際に表示するColliderのインスタンス
    private Renderer playerRenderer; // プレイヤーのRenderer

    private void Start()
    {
        // プレイヤーのRendererを取得
        playerRenderer = GetComponent<Renderer>();

        // 元の色を保存
        if (playerRenderer != null)
        {
            originalColor = playerRenderer.material.color;
        }

        // 吸い込み範囲のColliderを生成
        if (suctionRangeColliderPrefab != null)
        {
            suctionRangeColliderInstance = Instantiate(suctionRangeColliderPrefab, playerTransform.position, Quaternion.identity);
            suctionRangeColliderInstance.SetActive(false); // 初めは非表示にしておく
        }
    }

    private void Update()
    {
        // Qボタンが押されている間、吸い込み処理を実行
        if (Input.GetKey(KeyCode.Q))
        {
            TrySuckObjects();
            ShowSuctionRange(true); // 吸い込み範囲を表示
            ChangePlayerColor(suctionColor); // キャラクターの色を変更
        }
        else
        {
            ShowSuctionRange(false); // 吸い込み範囲を非表示
            ChangePlayerColor(originalColor); // キャラクターの色を元に戻す
        }
    }

    private Vector3 lastInputDirection = Vector3.forward; // 初期方向（前）

    private void TrySuckObjects()
    {
        float h = Input.GetAxisRaw("Horizontal");
        float v = Input.GetAxisRaw("Vertical");
        Vector3 inputDirection = new Vector3(h, 0, v).normalized;

        // 入力があったときだけ更新
        if (inputDirection != Vector3.zero)
        {
            lastInputDirection = inputDirection;
        }

        RaycastHit hit;
        Vector3 origin = playerTransform.position;
        Vector3 direction = lastInputDirection;

        if (Physics.Raycast(origin, direction, out hit, maxDistance))
        {
            if (hit.collider.CompareTag("enemy"))
            {
                Vector3 toPlayer = playerTransform.position - hit.collider.transform.position;
                if (hit.collider.attachedRigidbody != null)
                {
                    hit.collider.attachedRigidbody.AddForce(toPlayer.normalized * suctionForce);
                }

                if (Vector3.Distance(hit.collider.transform.position, playerTransform.position) < destroyDistance)
                {
                    Destroy(hit.collider.gameObject);
                }
            }
        }
    }




    private void ShowSuctionRange(bool isActive)
    {
        if (suctionRangeColliderInstance != null)
        {
            suctionRangeColliderInstance.SetActive(isActive); // 吸い込み範囲を表示/非表示
        }
    }

    private void ChangePlayerColor(Color color)
    {
        // プレイヤーの色を変更
        if (playerRenderer != null)
        {
            playerRenderer.material.color = color;
        }
    }

    // 吸い込み範囲を視覚化するためにGizmosを描画（エディタでのみ動作）
    private void OnDrawGizmos()
    {
        if (playerTransform != null)
        {
            Gizmos.color = new Color(0, 1, 0, 0.5f); // 半透明の緑色
            Gizmos.DrawWireSphere(playerTransform.position + playerTransform.forward * (maxDistance / 2), destroyDistance); // 吸い込み範囲の描画
        }
    }
}
